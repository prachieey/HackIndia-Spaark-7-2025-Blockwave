import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { useAuth } from '../../contexts/AuthContext';
import ReviewSummary from './ReviewSummary';
import ReviewList from './ReviewList';
import ReviewForm from './ReviewForm';
import { getUserReviewForEvent, getEventReviews } from '../../services/reviewService';
import { Button } from '../ui/button';
import { toast } from 'react-toastify';
import { motion, AnimatePresence } from 'framer-motion';

const ReviewsSection = ({ eventId }) => {
  const navigate = useNavigate();
  const { currentUser, isAuthenticated } = useAuth();
  const [userReview, setUserReview] = useState(null);
  const [isLoading, setIsLoading] = useState(true);
  const [reviews, setReviews] = useState([]);
  const [showReviewForm, setShowReviewForm] = useState(false);
  const [isSubmitting, setIsSubmitting] = useState(false);

  const fetchReviews = async () => {
    try {
      const reviewsData = await getEventReviews(eventId);
      setReviews(reviewsData);
    } catch (error) {
      console.error('Error fetching reviews:', error);
    }
  };

  useEffect(() => {
    const fetchData = async () => {
      setIsLoading(true);
      try {
        if (isAuthenticated && currentUser?._id) {
          const review = await getUserReviewForEvent(eventId);
          setUserReview(review);
        }
        await fetchReviews();
      } catch (error) {
        console.error('Error fetching review data:', error);
      } finally {
        setIsLoading(false);
      }
    };

    fetchData();
  }, [eventId, currentUser, isAuthenticated]);

  const handleReviewSubmit = async (reviewData) => {
    if (!isAuthenticated) {
      navigate('/login', { state: { from: window.location.pathname } });
      return;
    }

    setIsSubmitting(true);
    try {
      const [userReviewData, allReviews] = await Promise.all([
        getUserReviewForEvent(eventId),
        getEventReviews(eventId)
      ]);

      setUserReview(userReviewData);
      setReviews(allReviews);
      setShowReviewForm(false);

      toast.success('Your review has been submitted successfully!', {
        position: 'top-center',
        autoClose: 3000,
        hideProgressBar: false,
        closeOnClick: true,
        pauseOnHover: true,
        draggable: true,
      });
    } catch (error) {
      console.error('Error handling review submission:', error);
      toast.error('Failed to update reviews. Please try again.', {
        position: 'top-center',
        autoClose: 5000,
        hideProgressBar: false,
        closeOnClick: true,
        pauseOnHover: true,
        draggable: true,
      });
    } finally {
      setIsSubmitting(false);
    }
  };

  if (isLoading) {
    return (
      <section className="py-8">
        <div className="max-w-4xl mx-auto">
          <div className="animate-pulse space-y-6">
            <div className="h-8 bg-gray-200 rounded w-1/3"></div>
            <div className="h-4 bg-gray-200 rounded w-1/4"></div>
            <div className="h-32 bg-gray-100 rounded"></div>
          </div>
        </div>
      </section>
    );
  }

  const hasReviews = reviews.length > 0;

  return (
    <section className="py-8">
      <div className="max-w-4xl mx-auto">
        <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-6 gap-4">
          <div>
            <h2 className="text-2xl font-bold text-gray-900">
              {hasReviews ? `Customer Reviews (${reviews.length})` : 'Customer Reviews'}
            </h2>
            {!hasReviews && (
              <p className="text-gray-600 mt-1">
                No reviews yet. Be the first to share your experience!
              </p>
            )}
          </div>
          {isAuthenticated && (
            <Button
              onClick={() => setShowReviewForm(!showReviewForm)}
              disabled={isSubmitting}
              className="flex-shrink-0 w-full sm:w-auto"
              variant={showReviewForm ? 'outline' : 'default'}
            >
              {showReviewForm ? 'Cancel' : userReview ? 'Update Your Review' : 'Write a Review'}
            </Button>
          )}
        </div>
        <div className="space-y-8">
          <ReviewSummary eventId={eventId} reviews={reviews} />
          <AnimatePresence>
            {showReviewForm && (
              <motion.div
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                exit={{ opacity: 0, y: -20 }}
                transition={{ duration: 0.3 }}
                className="bg-space-black/80 backdrop-blur-sm border border-deep-purple/20 rounded-xl p-6 shadow-lg mb-8"
              >
                <div className="flex justify-between items-center mb-4">
                  <h3 className="text-xl font-semibold text-holographic-white">
                    Write a Review
                  </h3>
                  <button
                    onClick={() => setShowReviewForm(false)}
                    className="text-holographic-white/70 hover:text-holographic-white transition-colors"
                    disabled={isSubmitting}
                  >
                    <i className="fas fa-times text-lg"></i>
                  </button>
                </div>
                <ReviewForm
                  eventId={eventId}
                  user={currentUser}
                  existingReview={userReview}
                  onSuccess={handleReviewSubmit}
                  onCancel={() => setShowReviewForm(false)}
                />
              </motion.div>
            )}
          </AnimatePresence>
          {!isAuthenticated && (
            <div className="bg-space-black/50 backdrop-blur-sm border border-deep-purple/20 rounded-xl p-6 text-center">
              <p className="text-holographic-white/80 mb-4">
                Sign in to share your experience with this event
              </p>
              <Button
                onClick={() => navigate('/login', { state: { from: window.location.pathname } })}
                className="bg-gradient-to-r from-tech-blue to-deep-purple hover:opacity-90 text-white"
              >
                Sign In to Review
              </Button>
            </div>
          )}
          <div className="mt-8">
            <h3 className="text-xl font-semibold text-holographic-white mb-6">
              Customer Reviews {reviews.length > 0 && `(${reviews.length})`}
            </h3>
            {reviews.length === 0 ? (
              <div className="text-center py-12 bg-space-black/30 rounded-xl">
                <i className="fas fa-comment-alt text-4xl text-holographic-white/30 mb-4"></i>
                <p className="text-holographic-white/60">
                  No reviews yet. Be the first to share your experience!
                </p>
              </div>
            ) : (
              <ReviewList reviews={reviews} />
            )}
          </div>
        </div>
      </div>
    </section>
  );
};

export default ReviewsSection;
